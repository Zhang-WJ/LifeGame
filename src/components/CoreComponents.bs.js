// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var CssJs = require("bs-css-emotion/src/CssJs.bs.js");
var React = require("react");
var Polished = require("polished");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Css_Js_Core = require("bs-css/src/Css_Js_Core.bs.js");

var deleteProp = ((newProps, key) => delete newProps[key]);

function getOrEmpty(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles = CssJs.style([
      CssJs.label("Root"),
      CssJs.display("flex"),
      CssJs.color(CssJs.white)
    ]);

function make(props) {
  var className = styles + getOrEmpty(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var Root = {
  deleteProp: deleteProp,
  getOrEmpty: getOrEmpty,
  styles: styles,
  make: make
};

var deleteProp$1 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$1(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$1 = CssJs.style([
      CssJs.label("AppBar"),
      CssJs.display("flex"),
      CssJs.textAlign("center"),
      CssJs.unsafe("justifyContent", "center"),
      CssJs.unsafe("alignItems", "center"),
      CssJs.paddingTop({
            NAME: "rem",
            VAL: 2
          }),
      CssJs.fontSize({
            NAME: "rem",
            VAL: 2
          }),
      CssJs.lineHeight({
            NAME: "rem",
            VAL: 1
          })
    ]);

function make$1(props) {
  var className = styles$1 + getOrEmpty$1(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$1(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var AppBar = {
  deleteProp: deleteProp$1,
  getOrEmpty: getOrEmpty$1,
  styles: styles$1,
  make: make$1
};

var deleteProp$2 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$2(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$2 = CssJs.style([
      CssJs.label("Content"),
      CssJs.width({
            NAME: "percent",
            VAL: 100
          })
    ]);

function make$2(props) {
  var className = styles$2 + getOrEmpty$2(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$2(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var Content = {
  deleteProp: deleteProp$2,
  getOrEmpty: getOrEmpty$2,
  styles: styles$2,
  make: make$2
};

function CoreComponents$Icon(Props) {
  var name = Props.name;
  return React.createElement("i", {
              className: "fas fa-" + name
            });
}

var Icon = {
  make: CoreComponents$Icon
};

function CoreComponents$Button(Props) {
  var label = Props.label;
  var background = Props.background;
  var onClick = Props.onClick;
  var disabledOpt = Props.disabled;
  var children = Props.children;
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var shadow_1 = Polished.opacify(-0.4, "#" + background);
  var shadow = {
    NAME: "hex",
    VAL: shadow_1
  };
  var bg = CssJs.hex(background);
  var className = CssJs.style([
        CssJs.fontSize({
              NAME: "rem",
              VAL: 0.9
            }),
        CssJs.padding2({
              NAME: "rem",
              VAL: 0.5
            }, {
              NAME: "rem",
              VAL: 0.8
            }),
        CssJs.width({
              NAME: "rem",
              VAL: 3
            }),
        CssJs.height({
              NAME: "rem",
              VAL: 3
            }),
        CssJs.color(CssJs.white),
        CssJs.backgroundColor(bg),
        CssJs.borderRadius({
              NAME: "percent",
              VAL: 50
            }),
        CssJs.margin2("zero", {
              NAME: "rem",
              VAL: 0.5
            }),
        CssJs.borderWidth("zero"),
        CssJs.unsafe("userSelect", "none"),
        CssJs.outline({
              NAME: "rem",
              VAL: 0
            }, "none", CssJs.white),
        CssJs.unsafe("fontWeight", "700"),
        CssJs.unsafe("cursor", "pointer"),
        CssJs.unsafe("transition", "all .15s ease-in"),
        CssJs.selector(":focus", [
              CssJs.boxShadows([Css_Js_Core.Shadow.box("zero", "zero", "zero", {
                          NAME: "pxFloat",
                          VAL: 4
                        }, undefined, shadow)]),
              CssJs.opacity(0.9)
            ])
      ]);
  return React.createElement("button", {
              "aria-label": label,
              className: className,
              disabled: disabled,
              onClick: onClick
            }, children);
}

var Button = {
  make: CoreComponents$Button
};

function CoreComponents$ToggleButton(Props) {
  var isToggled = Props.isToggled;
  var onClick = Props.onClick;
  var label = Props.label;
  var disabledOpt = Props.disabled;
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var background = isToggled ? "666" : "7A8288";
  var name = isToggled ? "pause" : "play";
  return React.createElement(CoreComponents$Button, {
              label: label,
              background: background,
              onClick: onClick,
              disabled: disabled,
              children: React.createElement(CoreComponents$Icon, {
                    name: name
                  })
            });
}

var ToggleButton = {
  make: CoreComponents$ToggleButton
};

exports.Root = Root;
exports.AppBar = AppBar;
exports.Content = Content;
exports.Icon = Icon;
exports.Button = Button;
exports.ToggleButton = ToggleButton;
/* styles Not a pure module */
