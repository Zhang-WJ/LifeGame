// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var CssJs = require("bs-css-emotion/src/CssJs.bs.js");
var React = require("react");
var Caml_option = require("rescript/lib/js/caml_option.js");
var CoreComponents = require("./CoreComponents.bs.js");

var deleteProp = ((newProps, key) => delete newProps[key]);

function getOrEmpty(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles = CssJs.style([
      CssJs.label("Wrapper"),
      CssJs.display("flex"),
      CssJs.unsafe("justifyContent", "center"),
      CssJs.unsafe("alignItems", "center"),
      CssJs.padding2({
            NAME: "rem",
            VAL: 2
          }, "zero")
    ]);

function make(props) {
  var className = styles + getOrEmpty(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var Wrapper = {
  deleteProp: deleteProp,
  getOrEmpty: getOrEmpty,
  styles: styles,
  make: make
};

function Controls(Props) {
  var isPlaying = Props.isPlaying;
  var onReset = Props.onReset;
  var onRandom = Props.onRandom;
  var onTick = Props.onTick;
  var onToggleAutoplay = Props.onToggleAutoplay;
  return React.createElement(make, {
              children: React.createElement("div", {
                    role: "group"
                  }, React.createElement(CoreComponents.Button.make, {
                        label: "Reset grid",
                        background: "ee5f5b",
                        onClick: onReset,
                        children: React.createElement(CoreComponents.Icon.make, {
                              name: "undo"
                            })
                      }), React.createElement(CoreComponents.Button.make, {
                        label: "Random grid",
                        background: "62c462",
                        onClick: onRandom,
                        children: React.createElement(CoreComponents.Icon.make, {
                              name: "random"
                            })
                      }), React.createElement(CoreComponents.Button.make, {
                        label: "Next state",
                        background: "7A8288",
                        onClick: onTick,
                        disabled: isPlaying,
                        children: React.createElement(CoreComponents.Icon.make, {
                              name: "forward"
                            })
                      }), React.createElement(CoreComponents.ToggleButton.make, {
                        isToggled: isPlaying,
                        onClick: onToggleAutoplay,
                        label: "Toggle autpplay"
                      }))
            });
}

var make$1 = Controls;

exports.Wrapper = Wrapper;
exports.make = make$1;
/* styles Not a pure module */
